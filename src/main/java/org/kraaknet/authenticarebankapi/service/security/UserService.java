package org.kraaknet.authenticarebankapi.service.security;

import lombok.RequiredArgsConstructor;
import org.kraaknet.authenticarebankapi.controller.exceptions.NotAuthorizedException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
@RequiredArgsConstructor
public class UserService {

    /**
     * <p>
     *     Get the current logged-in user.
     * </p>
     * <p>
     *     Wrapper around SecurityContextHolder to
     *     a) centralize the logic and
     *     b) make it injectable and therefore Mockable without resorting to static mocking.
     * </p>
     * <p>
     *     Note that this would be entirely unnecessary if we could inject this information into the endpoints
     *     but .. that code is generated.
     * </p>
     * <p>
     *     I stand by the assessment: Api-first development is cool but it suffers from the obvious drawback that
     *     you lose control over the code, and many code generators suck.
     *     For example, all of the DTO classes generated by that thing have setters while they could be records..
     * </p>
     *
     *
     * @throws NotAuthorizedException if the user is not found in the SecurityContext
     *
     * @return The details of the currently logged in user
     */
    public UserDetails getCurrentUser() {
        return Optional.ofNullable(SecurityContextHolder.getContext())
                .map(SecurityContext::getAuthentication)
                .map(Authentication::getPrincipal)
                .map(prince -> {
                    if (prince instanceof UserDetails userDetails) {
                        return userDetails;
                    }
                    throw new ClassCastException();
                })
                .orElseThrow(NotAuthorizedException::new);
    }
}
